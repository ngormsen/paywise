"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var paypal_checkout_common_1 = require("./paypal-checkout.common");
var PaypalCheckout = (function (_super) {
    __extends(PaypalCheckout, _super);
    function PaypalCheckout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PaypalCheckout.prototype.paypalRequest = function (options) {
        return new Promise(function (resolve, reject) {
            var context = this;
            var braintreeClient = BTAPIClient.alloc().initWithAuthorization(options.token);
            var payPalDriver = BTPayPalDriver.alloc().initWithAPIClient(braintreeClient);
            payPalDriver.viewControllerPresentingDelegate = context;
            payPalDriver.appSwitchDelegate = context;
            var request = BTPayPalRequest.alloc().initWithAmount(options.amount);
            request.currencyCode = options.currencyCode;
            payPalDriver.requestOneTimePaymentCompletion(request, function (tokenizedPayPalAccount, error) {
                if (tokenizedPayPalAccount) {
                    resolve(tokenizedPayPalAccount.nonce);
                }
                else if (error) {
                    reject(error);
                }
                else {
                    reject("Buyer canceled payment approval");
                }
            });
        });
    };
    return PaypalCheckout;
}(paypal_checkout_common_1.Common));
exports.PaypalCheckout = PaypalCheckout;
//# sourceMappingURL=paypal-checkout.ios.js.map